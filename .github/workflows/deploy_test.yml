name: Deploy to Contabo VPS

on:
  push:
    branches: ["Collins"]
  pull_request:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          check-latest: true
          cache: "npm"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H vmi2322505.contaboserver.net >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "SSH key and known hosts set up successfully."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@213.199.61.72 "echo 'SSH Connection Successful'"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 213.199.61.72
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          debug: true
          script: |
            echo "Starting deployment..."

            # Check disk space
            echo "Checking disk space..."
            df -h
            available_space=$(df . | awk 'NR==2 {print $4}' | sed 's/G//')
            if (( $(echo "$available_space < 10" | bc -l) )); then
              echo "Error: Insufficient disk space. Need at least 10GB free."
              exit 1
            fi

            # Create and use temporary directory for npm cache
            export TMPDIR="/home/${{ secrets.SERVER_USER }}/tmp"
            mkdir -p $TMPDIR
            npm config set cache $TMPDIR/.npm

            # Clean up old files
            echo "Cleaning up old files..."
            rm -rf $TMPDIR/* || true
            rm -rf /home/${{ secrets.SERVER_USER }}/public_html/node_modules || true
            rm -rf /home/${{ secrets.SERVER_USER }}/public_html/.next || true

            if [ ! -d "/home/${{ secrets.SERVER_USER }}/public_html" ]; then
                echo "Project directory missing. Cloning repository..."
                mkdir -p /home/${{ secrets.SERVER_USER }}/public_html
                cd /home/${{ secrets.SERVER_USER }}/public_html
                git clone https://x-access-token:${{ secrets.SECRET_PAT }}@github.com/gridape/v1.git .
            else
                cd /home/${{ secrets.SERVER_USER }}/public_html
                echo "Project directory exists. Pulling latest changes..."
                if [ ! -d ".git" ]; then
                  echo "No .git repository found. Initializing repository..."
                  git init
                  git remote add origin https://x-access-token:${{ secrets.SECRET_PAT }}@github.com/gridape/v1.git
                fi
                git fetch origin main
                git reset --hard origin/main
            fi

            echo "Current directory: $(pwd)"

            # Fix permissions
            echo "Setting correct permissions..."
            sudo chown -R $USER:$USER .
            find . -type d -exec chmod 755 {} \;
            find . -type f -exec chmod 644 {} \;

            # Install and setup NVM
            echo "Setting up NVM..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Install latest Node.js 20 and npm
            echo "Installing latest Node.js 20..."
            nvm install 20
            nvm use 20
            
            # Update to latest npm
            echo "Updating to latest npm..."
            npm install -g npm@latest
            
            # Verify versions
            echo "Node.js version: $(node -v)"
            echo "NPM version: $(npm -v)"

            # Clean and prepare with error handling
            echo "Cleaning previous build..."
            rm -rf node_modules .next package-lock.json || true
            npm cache clean --force || true

            # Install dependencies with retry mechanism
            echo "Installing dependencies..."
            for i in {1..3}; do
              echo "Attempt $i of 3"
              if npm install --no-audit --no-fund --prefer-offline; then
                break
              elif [ $i -eq 3 ]; then
                echo "Failed to install dependencies after 3 attempts"
                exit 1
              fi
              echo "Retrying..."
              sleep 5
            done

            # Build application with increased memory limit
            echo "Building application..."
            export NODE_OPTIONS="--max-old-space-size=4096"
            NODE_ENV=production npx next build || {
              echo "Build failed"
              exit 1
            }

            # PM2 process management
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2@latest
            fi

            if pm2 list | grep -q "dashboard"; then
              echo "Restarting PM2 process..."
              pm2 restart dashboard --update-env
            else
              echo "Starting new PM2 process..."
              NODE_ENV=production pm2 start npm --name "dashboard" -- start
            fi

            # Clean up temporary files
            echo "Cleaning up..."
            rm -rf $TMPDIR/*

            # Verify deployment
            echo "Verifying PM2 process..."
            pm2 list
            
            echo "Deployment completed successfully."

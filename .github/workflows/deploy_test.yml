name: Deploy to Contabo VPS

on:
  push:
    branches: ["Collins"]
  pull_request:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      NODE_OPTIONS: --max-old-space-size=4096

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm cache verify

      - name: Build application
        run: npm run build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H vmi2322505.contaboserver.net >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 213.199.61.72
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            echo "Starting deployment..."

            # Define cleanup function
            cleanup() {
              echo "Cleaning up..."
              if [ -d "/home/${{ secrets.SERVER_USER }}/public_html/.next-backup" ]; then
                cd /home/${{ secrets.SERVER_USER }}/public_html
                rm -rf .next
                mv .next-backup .next
              fi
              pm2 list | grep -q "dashboard" && pm2 stop dashboard || true
            }

            # Set trap for cleanup on error
            trap cleanup ERR

            # Check disk space
            df -h /home/${{ secrets.SERVER_USER }}
            

            
            # Navigate to project directory
            cd /home/${{ secrets.SERVER_USER }}/public_html

            # Initialize or update repository
            if [ ! -d ".git" ]; then
              echo "Initializing new repository..."
              git init
              git remote add origin https://x-access-token:${{ secrets.SECRET_PAT }}@github.com/gridape/v1.git
            else
              echo "Updating existing repository..."
              git remote set-url origin https://x-access-token:${{ secrets.SECRET_PAT }}@github.com/gridape/v1.git
            fi

            # Fetch and reset to latest changes
            git fetch origin main
            git reset --hard origin/main

            # Backup existing .next directory
            if [ -d ".next" ]; then
              echo "Backing up .next directory..."
              mv .next .next-backup
            fi

            # Clean npm cache and remove existing dependencies
            echo "Cleaning environment..."
            export NODE_OPTIONS="--max-old-space-size=4096"
            npm cache clean --force
            rm -rf node_modules package-lock.json .next tmp

            # Install dependencies with retry mechanism
            echo "Installing dependencies..."
            for i in {1..3}; do
              echo "Attempt $i of 3"
              if npm install --no-audit --no-fund --prefer-offline; then
                break
              fi
              if [ $i -eq 3 ]; then
                echo "Failed to install dependencies after 3 attempts"
                exit 1
              fi
              echo "Retrying..."
              sleep 5
            done

            # Build application
            echo "Building application..."
            if npm run build; then
              echo "Build successful"
              rm -rf .next-backup
            else
              echo "Build failed"
              cleanup
              exit 1
            fi

            # PM2 process management
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi

            if pm2 list | grep -q "dashboard"; then
              echo "Restarting PM2 process..."
              pm2 restart dashboard
            else
              echo "Starting new PM2 process..."
              pm2 start npm --name "dashboard" -- start
            fi

            echo "Deployment completed successfully"

name: Docker Deploy

on:
  push:
    branches: [ Collins ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare Docker Tags
        id: prep
        run: |
          # Convert repository name to lowercase
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_LOWER=${REPO_LOWER}" >> $GITHUB_ENV
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LOWER }}:latest
            ghcr.io/${{ env.REPO_LOWER }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Use lowercase repository name
            REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            
            # Pull the latest image
            docker pull ghcr.io/${REPO_LOWER}:latest
            
            # Create or update docker-compose.yml
            cat > docker-compose.yml << EOL
            version: '3.8'
            services:
              web:
                image: ghcr.io/${REPO_LOWER}:latest
                ports:
                  - "3000:3000"
                environment:
                  - NODE_ENV=production
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            EOL
            
            # Deploy with docker compose
            docker compose pull
            docker compose up -d --force-recreate
            
            # Cleanup
            docker system prune -f
